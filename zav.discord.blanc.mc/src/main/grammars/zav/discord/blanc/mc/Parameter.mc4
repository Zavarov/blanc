package zav.discord.blanc.mc;

/**
 * This grammar describes the text sequence used to call commands.
 */
grammar Parameter extends zav.mc.Math {

    /**
     * Base interface for all parameters provided to the parser
     */
    interface Parameter;

    /**
     * All instances implementing this interface are Discord snowflakes.
     */
    interface DiscordEntity =
        id:NatLiteral
    ;

    /**
     * The equivalent to pinging a user.
     * If the user is in a guild and has a nickname, a semicolon is included.
     * It is not possible to distinguish between pinging a member and pinging a user.
     */
    UserParameter implements Parameter, DiscordEntity =
        "<" "@" semicolon:["!"]? id:NatLiteral ">"
    ;

    /**
     * The equivalent to pinging a text channel.
     */
    TextChannelParameter implements Parameter, DiscordEntity =
        "<" "#" id:NatLiteral ">"
    ;

    /**
     * The equivalent to pinging a role.
     */
    RoleParameter implements Parameter, DiscordEntity =
        "<" "@" "&" id:NatLiteral ">"
    ;

    /**
     * A text sequence wrapped around quotation marks.
     * The string parameter should have precedence so that we're able to escape the quotation marks.
     */
    StringParameter implements Parameter <500> =
        StringLiteral
    ;

    /**
     * Use Expressions.mc4 for expressions.
     * Expressions can be both arithmetic expressions as well as raw text.
     * It is up to the application to interpret the data.
     */
     ExpressionParameter implements Parameter =
        Expression
     ;
}